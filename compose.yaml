
services:
  api:
    build:
      context: .
      dockerfile: ./Dockerfile
    env_file:
      - ./.env
    command: ./wait-for-it.sh db:5432 -- ./entrypoint.sh
    ports:
      - 8000:8000
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/app
      - static_volume:/app/static
      - media_volume:/app/media
    develop:
      watch:
        - action: rebuild
          path: .
          target: /app
        - action: rebuild
          path: ./uv.lock
        - action: rebuild
          path: ./pyproject.toml
    
  db:
    image: postgres:17.2
    restart: always
    env_file:
      - ./.env
    user: postgres
    secrets:
      - db-password
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${SQL_DATABASE}
      - POSTGRES_USER=${SQL_USER}
      - POSTGRES_PORT=${SQL_PORT}
      - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    expose:
      - 5432
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    build: 
      context: ./nginx
      dockerfile: ./Dockerfile
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    ports:
      - 80:80
    depends_on:
      - api

volumes:
  db-data:
  static_volume:
  media_volume:
secrets:
  db-password:
    file: db/password.txt

  
